{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\App-Shopping\\\\node_modules\\\\react-native-range-slider-expo\\\\src\\\\TextSlider.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nvar osRtl = I18nManager.isRTL;\nvar SMALL_SIZE = 24;\nvar MEDIUM_SIZE = 34;\nvar LARGE_SIZE = 44;\nvar step = 1;\nvar min = 0;\n\nvar TextualSlider = function TextualSlider(_ref) {\n  var values = _ref.values,\n      valueOnChange = _ref.valueOnChange,\n      _ref$styleSize = _ref.styleSize,\n      styleSize = _ref$styleSize === void 0 ? 'medium' : _ref$styleSize,\n      _ref$knobColor = _ref.knobColor,\n      knobColor = _ref$knobColor === void 0 ? '#00a2ff' : _ref$knobColor,\n      _ref$inRangeBarColor = _ref.inRangeBarColor,\n      inRangeBarColor = _ref$inRangeBarColor === void 0 ? 'rgb(200,200,200)' : _ref$inRangeBarColor,\n      _ref$outOfRangeBarCol = _ref.outOfRangeBarColor,\n      outOfRangeBarColor = _ref$outOfRangeBarCol === void 0 ? 'rgb(100,100,100)' : _ref$outOfRangeBarCol,\n      _ref$valueLabelsTextC = _ref.valueLabelsTextColor,\n      valueLabelsTextColor = _ref$valueLabelsTextC === void 0 ? 'white' : _ref$valueLabelsTextC,\n      _ref$valueLabelsBackg = _ref.valueLabelsBackgroundColor,\n      valueLabelsBackgroundColor = _ref$valueLabelsBackg === void 0 ? '#3a4766' : _ref$valueLabelsBackg,\n      rangeLabelsStyle = _ref.rangeLabelsStyle,\n      _ref$showRangeLabels = _ref.showRangeLabels,\n      showRangeLabels = _ref$showRangeLabels === void 0 ? true : _ref$showRangeLabels,\n      _ref$showValueLabels = _ref.showValueLabels,\n      showValueLabels = _ref$showValueLabels === void 0 ? true : _ref$showValueLabels,\n      initialValue = _ref.initialValue;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      stepInPixels = _useState2[0],\n      setStepInPixels = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      knobSize = _useState4[0],\n      setknobSize = _useState4[1];\n\n  var _useState5 = useState(1),\n      _useState6 = _slicedToArray(_useState5, 2),\n      max = _useState6[0],\n      setMax = _useState6[1];\n\n  var _useState7 = useState('row'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      flexDirection = _useState8[0],\n      setFlexDirection = _useState8[1];\n\n  var _useState9 = useState({\n    left: (knobSize - 40) / 2\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      svgOffset = _useState10[0],\n      setSvgOffset = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      valueOffset = _useState12[0],\n      setValueOffset = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      TextualSliderWidth = _useState14[0],\n      setTextualSliderWidth = _useState14[1];\n\n  var _useState15 = useState(new Animated.Value(0)),\n      _useState16 = _slicedToArray(_useState15, 1),\n      translateX = _useState16[0];\n\n  var _useState17 = useState(new Animated.Value(0.01)),\n      _useState18 = _slicedToArray(_useState17, 1),\n      valueLabelScale = _useState18[0];\n\n  var _useState19 = useState(new Animated.Value(0.01)),\n      _useState20 = _slicedToArray(_useState19, 1),\n      inRangeScaleX = _useState20[0];\n\n  var valueTextRef = React.createRef();\n  var opacity = React.useRef(new Animated.Value(0)).current;\n  useEffect(function () {\n    setMax(values.length - 1);\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n    setSvgOffset(osRtl ? {\n      right: (knobSize - 40) / 2\n    } : {\n      left: (knobSize - 40) / 2\n    });\n  }, []);\n  useEffect(function () {\n    if (TextualSliderWidth > 0) {\n      var _valueTextRef$current;\n\n      var stepSize = setStepSize(max, min, step);\n      (_valueTextRef$current = valueTextRef.current) == null ? void 0 : _valueTextRef$current.setNativeProps({\n        text: values[min].text\n      });\n\n      if (typeof initialValue === 'number' && initialValue >= min && initialValue <= max) {\n        var offset = (initialValue - min) / step * stepSize - knobSize / 2;\n        setValueStatic(offset, knobSize, stepSize);\n        setValueText(offset);\n      }\n\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialValue, TextualSliderWidth]);\n  useEffect(function () {\n    var size = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    setknobSize(size);\n    translateX.setValue(-size / 4);\n  }, [styleSize]);\n\n  var setValueStatic = function setValueStatic(newOffset, knobSize, stepInPixels) {\n    newOffset = Math.round((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    settingValue(newOffset);\n    setValueOffset(newOffset);\n    var index = Math.round((newOffset + knobSize / 2) * (max - min) / TextualSliderWidth / step) * step + min;\n    valueOnChange(values[index]);\n  };\n\n  var settingValue = function settingValue(newOffset) {\n    translateX.setValue(newOffset);\n    inRangeScaleX.setValue((newOffset + knobSize / 2) / TextualSliderWidth + 0.01);\n  };\n\n  var setValueText = function setValueText(totalOffset) {\n    var _valueTextRef$current2;\n\n    var numericValue = Math.floor((totalOffset + knobSize / 2) * (max - min) / TextualSliderWidth / step) * step + min;\n    (_valueTextRef$current2 = valueTextRef.current) == null ? void 0 : _valueTextRef$current2.setNativeProps({\n      text: values[numericValue].text\n    });\n  };\n\n  var setStepSize = function setStepSize(max, min, step) {\n    var numberOfSteps = (max - min) / step;\n    var stepSize = TextualSliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  };\n\n  var onGestureEvent = function onGestureEvent(event) {\n    var totalOffset = event.nativeEvent.translationX + valueOffset;\n\n    if (totalOffset >= -knobSize / 2 && totalOffset <= TextualSliderWidth - knobSize / 2) {\n      translateX.setValue(totalOffset);\n\n      if (valueTextRef != null) {\n        var _valueTextRef$current3;\n\n        var index = Math.round((totalOffset + knobSize / 2) * (max - min) / TextualSliderWidth / step) * step + min;\n        (_valueTextRef$current3 = valueTextRef.current) == null ? void 0 : _valueTextRef$current3.setNativeProps({\n          text: values[index].text\n        });\n      }\n\n      inRangeScaleX.setValue((totalOffset + knobSize / 2) / TextualSliderWidth + 0.01);\n    }\n  };\n\n  var onHandlerStateChange = function onHandlerStateChange(event) {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(valueLabelScale, 1);\n    }\n\n    if (event.nativeEvent.state === State.END) {\n      var newOffset = event.nativeEvent.translationX + valueOffset;\n      newOffset = Math.round((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= TextualSliderWidth - knobSize / 2) {\n        newOffset = TextualSliderWidth - knobSize / 2;\n      }\n\n      setValueStatic(newOffset, knobSize, stepInPixels);\n      scaleTo(valueLabelScale, 0.01);\n    }\n  };\n\n  var scaleTo = function scaleTo(param, toValue) {\n    return Animated.timing(param, {\n      toValue: toValue,\n      duration: 150,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var onLayout = function onLayout(event) {\n    setTextualSliderWidth(event.nativeEvent.layout.width);\n  };\n\n  var labelOpacity = valueLabelScale.interpolate({\n    inputRange: [0.1, 1],\n    outputRange: [0, 1]\n  });\n  return React.createElement(Animated.View, {\n    style: [styles.container, {\n      opacity: opacity,\n      padding: styleSize === 'large' ? 7 : styleSize === 'medium' ? 14 : 21\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, showValueLabels && React.createElement(View, {\n    style: {\n      width: '100%',\n      flexDirection: flexDirection\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      opacity: labelOpacity,\n      transform: [{\n        translateX: translateX\n      }, {\n        scale: valueLabelScale\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: {\n      width: '100%',\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }\n  }, React.createElement(TextInput, {\n    style: _objectSpread(_objectSpread({}, svgOffset), {}, {\n      color: valueLabelsTextColor,\n      fontWeight: 'bold',\n      backgroundColor: valueLabelsBackgroundColor,\n      paddingHorizontal: 20,\n      paddingVertical: 5,\n      borderRadius: 3\n    }),\n    ref: valueTextRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 29\n    }\n  })))), React.createElement(View, {\n    style: {\n      width: '100%',\n      height: knobSize,\n      marginVertical: 4,\n      position: 'relative',\n      flexDirection: flexDirection,\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: [styles.bar, {\n      backgroundColor: inRangeBarColor,\n      left: knobSize / 4,\n      marginLeft: -knobSize / 4,\n      right: knobSize / 4,\n      height: knobSize / 3\n    }],\n    onLayout: onLayout,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      width: TextualSliderWidth,\n      height: knobSize / 3,\n      backgroundColor: outOfRangeBarColor,\n      transform: [{\n        translateX: -TextualSliderWidth / 2\n      }, {\n        scaleX: inRangeScaleX\n      }, {\n        translateX: TextualSliderWidth / 2\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      left: -knobSize / 4,\n      width: knobSize / 2.5,\n      height: knobSize / 3,\n      borderRadius: knobSize / 3,\n      backgroundColor: outOfRangeBarColor\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }), React.createElement(PanGestureHandler, {\n    onGestureEvent: onGestureEvent,\n    onHandlerStateChange: onHandlerStateChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, React.createElement(Animated.View, {\n    style: [styles.knob, {\n      height: knobSize,\n      width: knobSize,\n      borderRadius: knobSize,\n      backgroundColor: knobColor,\n      transform: [{\n        translateX: translateX\n      }]\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }))), showRangeLabels && React.createElement(View, {\n    style: {\n      width: '100%',\n      flexDirection: flexDirection,\n      justifyContent: 'space-between'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: [rangeLabelsStyle, {\n      fontWeight: \"bold\",\n      marginLeft: -7\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 21\n    }\n  }, values.length > 1 ? values[0].text : ''), React.createElement(Text, {\n    style: [rangeLabelsStyle, {\n      fontWeight: \"bold\"\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 21\n    }\n  }, values.length > 1 ? values[max].text : '')));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%',\n    overflow: 'visible'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  },\n  bar: {\n    position: 'absolute',\n    borderBottomRightRadius: 100,\n    borderTopRightRadius: 100\n  }\n});\nexport default TextualSlider;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/App-Shopping/node_modules/react-native-range-slider-expo/src/TextSlider.tsx"],"names":["React","useState","useEffect","PanGestureHandler","State","osRtl","I18nManager","isRTL","SMALL_SIZE","MEDIUM_SIZE","LARGE_SIZE","step","min","TextualSlider","values","valueOnChange","styleSize","knobColor","inRangeBarColor","outOfRangeBarColor","valueLabelsTextColor","valueLabelsBackgroundColor","rangeLabelsStyle","showRangeLabels","showValueLabels","initialValue","stepInPixels","setStepInPixels","knobSize","setknobSize","max","setMax","flexDirection","setFlexDirection","left","svgOffset","setSvgOffset","valueOffset","setValueOffset","TextualSliderWidth","setTextualSliderWidth","Animated","Value","translateX","valueLabelScale","inRangeScaleX","valueTextRef","createRef","opacity","useRef","current","length","right","stepSize","setStepSize","setNativeProps","text","offset","setValueStatic","setValueText","timing","toValue","duration","useNativeDriver","start","size","setValue","newOffset","Math","round","settingValue","index","totalOffset","numericValue","floor","numberOfSteps","onGestureEvent","event","nativeEvent","translationX","onHandlerStateChange","state","BEGAN","scaleTo","END","param","onLayout","layout","width","labelOpacity","interpolate","inputRange","outputRange","styles","container","padding","position","bottom","transform","scale","alignItems","color","fontWeight","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","height","marginVertical","bar","marginLeft","scaleX","knob","justifyContent","StyleSheet","create","overflow","elevation","borderBottomRightRadius","borderTopRightRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Animated, StyleSheet, View, LayoutChangeEvent, Text, TextInput, I18nManager, TextStyle, StyleProp } from 'react-native';\nimport { PanGestureHandler, PanGestureHandlerGestureEvent, State } from 'react-native-gesture-handler';\n\nconst osRtl = I18nManager.isRTL;\n\nconst SMALL_SIZE = 24;\nconst MEDIUM_SIZE = 34;\nconst LARGE_SIZE = 44;\nconst step = 1;\nconst min = 0;\n\nexport type itemType = {\n    value: number,\n    text: string\n}\n\ninterface TextualSliderProps {\n    values: itemType[];\n    valueOnChange: (value: itemType) => void;\n    styleSize?: 'small' | 'medium' | 'large' | number;\n    knobColor?: string;\n    inRangeBarColor?: string;\n    outOfRangeBarColor?: string;\n    valueLabelsTextColor?: string;\n    valueLabelsBackgroundColor?: string;\n    rangeLabelsStyle?: StyleProp<TextStyle>;\n    showRangeLabels?: boolean;\n    showValueLabels?: boolean;\n    initialValue?: number;\n}\n\nconst TextualSlider = ({\n    values, valueOnChange,\n    styleSize = 'medium',\n    knobColor = '#00a2ff',\n    inRangeBarColor = 'rgb(200,200,200)',\n    outOfRangeBarColor = 'rgb(100,100,100)',\n    valueLabelsTextColor = 'white',\n    valueLabelsBackgroundColor = '#3a4766',\n    rangeLabelsStyle,\n    showRangeLabels = true,\n    showValueLabels = true,\n    initialValue\n}: TextualSliderProps) => {\n\n    // settings\n    const [stepInPixels, setStepInPixels] = useState(0);\n    const [knobSize, setknobSize] = useState(0);\n\n    const [max, setMax] = useState(1);\n\n    // rtl settings\n    const [flexDirection, setFlexDirection] = useState<\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\" | undefined>('row');\n    const [svgOffset, setSvgOffset] = useState<object>({ left: (knobSize - 40) / 2 });\n\n    const [valueOffset, setValueOffset] = useState(0);\n    const [TextualSliderWidth, setTextualSliderWidth] = useState(0);\n\n    // animation values\n    const [translateX] = useState(new Animated.Value(0));\n    const [valueLabelScale] = useState(new Animated.Value(0.01));\n    const [inRangeScaleX] = useState(new Animated.Value(0.01));\n\n    // refs\n    const valueTextRef = React.createRef<TextInput>();\n    const opacity = React.useRef<Animated.Value>(new Animated.Value(0)).current;\n\n    // initalizing settings\n    useEffect(() => {\n        setMax(values.length - 1);\n        setFlexDirection(osRtl ? 'row-reverse' : 'row');\n        setSvgOffset(osRtl ? { right: (knobSize - 40) / 2 } : { left: (knobSize - 40) / 2 });\n    }, []);\n    useEffect(() => {\n        if (TextualSliderWidth > 0) {\n            const stepSize = setStepSize(max, min, step);\n            valueTextRef.current?.setNativeProps({ text: values[min].text });\n            if (typeof initialValue === 'number' && initialValue >= min && initialValue <= max) {\n                const offset = ((initialValue - min) / step) * stepSize - (knobSize / 2);\n                setValueStatic(offset, knobSize, stepSize);\n                setValueText(offset);\n            }\n            Animated.timing(opacity, {\n                toValue: 1,\n                duration: 64,\n                useNativeDriver: true\n            }).start();\n        }\n    }, [min, max, step, initialValue, TextualSliderWidth]);\n    useEffect(() => {\n        const size = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n        setknobSize(size);\n        translateX.setValue(-size / 4);\n    }, [styleSize]);\n\n    const setValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\n        newOffset = Math.round((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n        settingValue(newOffset);\n        setValueOffset(newOffset);\n        const index = Math.round(((newOffset + (knobSize / 2)) * (max - min) / TextualSliderWidth) / step) * step + min;\n        valueOnChange(values[index]);\n    }\n    const settingValue = (newOffset: number) => {\n        translateX.setValue(newOffset);\n        inRangeScaleX.setValue((newOffset + (knobSize / 2)) / TextualSliderWidth + 0.01);\n    }\n    const setValueText = (totalOffset: number) => {\n        const numericValue: number = Math.floor(((totalOffset + (knobSize / 2)) * (max - min) / TextualSliderWidth) / step) * step + min;\n        valueTextRef.current?.setNativeProps({ text: values[numericValue].text });\n    }\n    const setStepSize = (max: number, min: number, step: number) => {\n        const numberOfSteps = ((max - min) / step);\n        const stepSize = TextualSliderWidth / numberOfSteps;\n        setStepInPixels(stepSize);\n        return stepSize;\n    }\n\n    // value gesture events ------------------------------------------------------------------------\n    const onGestureEvent = (event: PanGestureHandlerGestureEvent) => {\n        let totalOffset = event.nativeEvent.translationX + valueOffset;\n        if (totalOffset >= - knobSize / 2 && totalOffset <= TextualSliderWidth - knobSize / 2) {\n            translateX.setValue(totalOffset);\n            if (valueTextRef != null) {\n                const index = Math.round(((totalOffset + (knobSize / 2)) * (max - min) / TextualSliderWidth) / step) * step + min;\n                valueTextRef.current?.setNativeProps({ text: values[index].text });\n            }\n            inRangeScaleX.setValue((totalOffset + (knobSize / 2)) / TextualSliderWidth + 0.01);\n        }\n    }\n    const onHandlerStateChange = (event: PanGestureHandlerGestureEvent) => {\n        if (event.nativeEvent.state === State.BEGAN) {\n            scaleTo(valueLabelScale, 1);\n        }\n        if (event.nativeEvent.state === State.END) {\n            let newOffset = event.nativeEvent.translationX + valueOffset;\n            newOffset = Math.round((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n            if (newOffset < -knobSize / 2) {\n                newOffset = -knobSize / 2;\n            } else if (newOffset >= TextualSliderWidth - knobSize / 2) {\n                newOffset = TextualSliderWidth - knobSize / 2;\n            }\n            setValueStatic(newOffset, knobSize, stepInPixels);\n            scaleTo(valueLabelScale, 0.01);\n        }\n    }\n    // ------------------------------------------------------------------------------------------------\n\n    // gesture events help functions ------------------------------------------------------------------\n    const scaleTo = (param: Animated.Value, toValue: number) => Animated.timing(param,\n        {\n            toValue,\n            duration: 150,\n            useNativeDriver: true\n        }\n    ).start();\n    // ------------------------------------------------------------------------------------------------\n\n    // setting bar width ------------------------------------------------------------------------------\n    const onLayout = (event: LayoutChangeEvent) => {\n        setTextualSliderWidth(event.nativeEvent.layout.width);\n    }\n    // ------------------------------------------------------------------------------------------------\n\n    const labelOpacity = valueLabelScale.interpolate({\n        inputRange: [0.1, 1],\n        outputRange: [0, 1]\n    })\n    return (\n        <Animated.View style={[styles.container, { opacity, padding: styleSize === 'large' ? 7 : styleSize === 'medium' ? 14 : 21 }]}>\n            {\n                showValueLabels &&\n                <View style={{ width: '100%', flexDirection }}>\n                    <Animated.View\n                        style={{ position: 'absolute', bottom: 0, left: 0, opacity: labelOpacity, transform: [{ translateX }, { scale: valueLabelScale }] }}\n                    >\n                        <View style={{ width: '100%', alignItems: 'center' }}>\n                            <TextInput style={{ ...svgOffset, color: valueLabelsTextColor, fontWeight: 'bold', backgroundColor: valueLabelsBackgroundColor, paddingHorizontal: 20, paddingVertical: 5, borderRadius: 3 }} ref={valueTextRef} />\n                        </View>\n                    </Animated.View>\n                </View>\n            }\n            <View style={{ width: '100%', height: knobSize, marginVertical: 4, position: 'relative', flexDirection, alignItems: 'center' }}>\n                <View style={[styles.bar, { backgroundColor: inRangeBarColor, left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: knobSize / 3 }]} onLayout={onLayout} />\n                <Animated.View style={{ width: TextualSliderWidth, height: knobSize / 3, backgroundColor: outOfRangeBarColor, transform: [{ translateX: -TextualSliderWidth / 2 }, { scaleX: inRangeScaleX }, { translateX: TextualSliderWidth / 2 }] }} />\n                <Animated.View style={{ position: 'absolute', left: -knobSize / 4, width: knobSize / 2.5, height: knobSize / 3, borderRadius: knobSize / 3, backgroundColor: outOfRangeBarColor }} />\n                <PanGestureHandler {...{ onGestureEvent, onHandlerStateChange }}>\n                    <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: knobColor, transform: [{ translateX }] }]} />\n                </PanGestureHandler>\n            </View>\n            {\n                showRangeLabels &&\n                <View style={{ width: '100%', flexDirection, justifyContent: 'space-between' }}>\n                    <Text style={[rangeLabelsStyle, { fontWeight: \"bold\", marginLeft: -7 }]}>{values.length > 1 ? values[0].text : ''}</Text>\n                    <Text style={[rangeLabelsStyle, { fontWeight: \"bold\" }]}>{values.length > 1 ? values[max].text : ''}</Text>\n                </View>\n            }\n        </Animated.View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        height: 100,\n        width: '100%',\n        overflow: 'visible'\n    },\n    knob: {\n        position: 'absolute',\n        elevation: 4\n    },\n    bar: {\n        position: 'absolute',\n        borderBottomRightRadius: 100,\n        borderTopRightRadius: 100\n    }\n});\n\nexport default TextualSlider;\n"]},"metadata":{},"sourceType":"module"}