{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'react-native-flash-message';\nexport var cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    list: [],\n    loadingCart: false,\n    checkOrder: false,\n    order: {}\n  },\n  reducers: {\n    addItemCart: function addItemCart(state, action) {\n      if (state.list.length) {\n        var item = state.list.findIndex(function (item) {\n          return item.id === action.payload.id;\n        });\n\n        if (item === -1) {\n          state.list = [].concat(_toConsumableArray(state.list), [action.payload]);\n        } else state.list[item].count += 1;\n      } else state.list = [].concat(_toConsumableArray(state.list), [action.payload]);\n\n      showMessage({\n        message: \"Thêm vào giỏ hàng thành công\",\n        type: \"success\",\n        duration: 3000\n      });\n    },\n    removeItemCart: function removeItemCart(state, action) {\n      var item = state.list.findIndex(function (item) {\n        return item.id === action.payload;\n      });\n      if (item !== -1) state.list.splice(item, 1);\n    },\n    countItemCart: function countItemCart(state, action) {\n      var item = state.list.findIndex(function (item) {\n        return item.id === action.payload.id;\n      });\n\n      if (action.payload.type === '-') {\n        state.list[item].count -= state.list[item].count > 1 ? 1 : 0;\n      } else {\n        state.list[item].count += 1;\n      }\n    },\n    postOrder: function postOrder(state, action) {\n      state.loadingCart = true;\n    },\n    postOrderSuccess: function postOrderSuccess(state, action) {\n      state.loadingCart = false;\n      state.order = action.payload;\n      state.list = [];\n      state.checkOrder = true;\n    },\n    resetCheckOrder: function resetCheckOrder(state, action) {\n      state.checkOrder = false;\n    }\n  }\n});\nvar _cartSlice$actions = cartSlice.actions,\n    addItemCart = _cartSlice$actions.addItemCart,\n    removeItemCart = _cartSlice$actions.removeItemCart,\n    countItemCart = _cartSlice$actions.countItemCart,\n    postOrder = _cartSlice$actions.postOrder,\n    postOrderSuccess = _cartSlice$actions.postOrderSuccess,\n    resetCheckOrder = _cartSlice$actions.resetCheckOrder;\nexport { addItemCart, removeItemCart, countItemCart, postOrder, postOrderSuccess, resetCheckOrder };\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/App-Shopping/store/slices/cartSlice.js"],"names":["createSlice","showMessage","cartSlice","name","initialState","list","loadingCart","checkOrder","order","reducers","addItemCart","state","action","length","item","findIndex","id","payload","count","message","type","duration","removeItemCart","splice","countItemCart","postOrder","postOrderSuccess","resetCheckOrder","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\nimport { showMessage } from 'react-native-flash-message';\r\n\r\nexport const cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState : {\r\n    list: [],\r\n    loadingCart: false,\r\n    checkOrder: false,\r\n    order: {}\r\n  },\r\n  reducers: {\r\n    addItemCart: (state, action) => {\r\n      if(state.list.length) {\r\n        let item = state.list.findIndex(item => item.id === action.payload.id);\r\n        if(item === -1) {\r\n          state.list = [...state.list, action.payload];\r\n        }\r\n        else state.list[item].count += 1;\r\n      }\r\n      else state.list = [...state.list, action.payload]\r\n\r\n      showMessage({\r\n        message: \"Thêm vào giỏ hàng thành công\",\r\n            type: \"success\",\r\n            duration: 3000\r\n      })\r\n    },\r\n    removeItemCart: (state, action) => {\r\n      let item = state.list.findIndex(item => item.id === action.payload);\r\n      if(item !== -1) state.list.splice(item, 1);\r\n    },\r\n    countItemCart: (state, action) => {\r\n      let item = state.list.findIndex(item => item.id === action.payload.id);\r\n      if(action.payload.type === '-'){\r\n        state.list[item].count -= state.list[item].count > 1 ?  1 : 0\r\n      }\r\n      else {\r\n        state.list[item].count += 1;\r\n      } \r\n    },\r\n    postOrder: (state, action) => {\r\n      // console.log('vao  slice')\r\n      state.loadingCart = true;\r\n    },\r\n    postOrderSuccess: (state, action) => {\r\n      state.loadingCart = false;\r\n      state.order = action.payload;\r\n      state.list = [];\r\n      state.checkOrder = true;\r\n      // showMessage({\r\n      //   message: \"Tạo đơn hàng thành công, vui lòng vào danh sách đơn hàng để kiểm tra\",\r\n      //       type: \"success\",\r\n      //       duration: 4000\r\n      // })\r\n    },\r\n    resetCheckOrder: (state, action) => {\r\n      state.checkOrder = false;\r\n    }\r\n  },\r\n  \r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const {addItemCart, removeItemCart, countItemCart, postOrder, postOrderSuccess, resetCheckOrder} = cartSlice.actions\r\n\r\nexport default cartSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}