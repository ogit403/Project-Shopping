{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\App-Shopping\\\\node_modules\\\\react-native-range-slider-expo\\\\src\\\\Slider.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Svg, { Path } from 'react-native-svg';\nvar osRtl = I18nManager.isRTL;\nvar SMALL_SIZE = 24;\nvar MEDIUM_SIZE = 34;\nvar LARGE_SIZE = 44;\nexport var Slider = function Slider(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      valueOnChange = _ref.valueOnChange,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? 1 : _ref$step,\n      _ref$styleSize = _ref.styleSize,\n      styleSize = _ref$styleSize === void 0 ? 'medium' : _ref$styleSize,\n      _ref$knobColor = _ref.knobColor,\n      knobColor = _ref$knobColor === void 0 ? '#00a2ff' : _ref$knobColor,\n      _ref$inRangeBarColor = _ref.inRangeBarColor,\n      inRangeBarColor = _ref$inRangeBarColor === void 0 ? 'rgb(200,200,200)' : _ref$inRangeBarColor,\n      _ref$outOfRangeBarCol = _ref.outOfRangeBarColor,\n      outOfRangeBarColor = _ref$outOfRangeBarCol === void 0 ? 'rgb(100,100,100)' : _ref$outOfRangeBarCol,\n      _ref$valueLabelsTextC = _ref.valueLabelsTextColor,\n      valueLabelsTextColor = _ref$valueLabelsTextC === void 0 ? 'white' : _ref$valueLabelsTextC,\n      _ref$valueLabelsBackg = _ref.valueLabelsBackgroundColor,\n      valueLabelsBackgroundColor = _ref$valueLabelsBackg === void 0 ? '#3a4766' : _ref$valueLabelsBackg,\n      _ref$rangeLabelsTextC = _ref.rangeLabelsTextColor,\n      rangeLabelsTextColor = _ref$rangeLabelsTextC === void 0 ? 'rgb(60,60,60)' : _ref$rangeLabelsTextC,\n      _ref$showRangeLabels = _ref.showRangeLabels,\n      showRangeLabels = _ref$showRangeLabels === void 0 ? true : _ref$showRangeLabels,\n      _ref$showValueLabels = _ref.showValueLabels,\n      showValueLabels = _ref$showValueLabels === void 0 ? true : _ref$showValueLabels,\n      initialValue = _ref.initialValue;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      stepInPixels = _useState2[0],\n      setStepInPixels = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      knobSize = _useState4[0],\n      setknobSize = _useState4[1];\n\n  var _useState5 = useState(15),\n      _useState6 = _slicedToArray(_useState5, 1),\n      fontSize = _useState6[0];\n\n  var _useState7 = useState('row'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      flexDirection = _useState8[0],\n      setFlexDirection = _useState8[1];\n\n  var _useState9 = useState({\n    left: (knobSize - 40) / 2\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      svgOffset = _useState10[0],\n      setSvgOffset = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      valueOffset = _useState12[0],\n      setValueOffset = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      sliderWidth = _useState14[0],\n      setSliderWidth = _useState14[1];\n\n  var _useState15 = useState(new Animated.Value(0)),\n      _useState16 = _slicedToArray(_useState15, 1),\n      translateX = _useState16[0];\n\n  var _useState17 = useState(new Animated.Value(0.01)),\n      _useState18 = _slicedToArray(_useState17, 1),\n      valueLabelScale = _useState18[0];\n\n  var _useState19 = useState(new Animated.Value(0.01)),\n      _useState20 = _slicedToArray(_useState19, 1),\n      inRangeScaleX = _useState20[0];\n\n  var valueTextRef = React.createRef();\n  var opacity = React.useRef(new Animated.Value(0)).current;\n  useEffect(function () {\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n    setSvgOffset(osRtl ? {\n      right: (knobSize - 40) / 2\n    } : {\n      left: (knobSize - 40) / 2\n    });\n  }, [knobSize]);\n  useEffect(function () {\n    if (sliderWidth > 0) {\n      var _valueTextRef$current;\n\n      var stepSize = setStepSize(max, min, step);\n      (_valueTextRef$current = valueTextRef.current) == null ? void 0 : _valueTextRef$current.setNativeProps({\n        text: min.toString()\n      });\n\n      if (typeof initialValue === 'number' && initialValue >= min && initialValue <= max) {\n        var offset = (initialValue - min) / step * stepSize - knobSize / 2;\n        setValueStatic(offset, knobSize, stepSize);\n        setValueText(offset);\n      }\n\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialValue, sliderWidth]);\n  useEffect(function () {\n    var size = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    setknobSize(size);\n    translateX.setValue(-size / 4);\n  }, [styleSize]);\n\n  var setValueStatic = function setValueStatic(newOffset, knobSize, stepInPixels) {\n    newOffset = Math.round((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    settingValue(newOffset);\n    setValueOffset(newOffset);\n    valueOnChange(Math.round((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min);\n  };\n\n  var settingValue = function settingValue(newOffset) {\n    translateX.setValue(newOffset);\n    inRangeScaleX.setValue((newOffset + knobSize / 2) / sliderWidth + 0.01);\n  };\n\n  var setValueText = function setValueText(totalOffset) {\n    var _valueTextRef$current2;\n\n    var numericValue = Math.floor((totalOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n    (_valueTextRef$current2 = valueTextRef.current) == null ? void 0 : _valueTextRef$current2.setNativeProps({\n      text: numericValue.toString()\n    });\n  };\n\n  var setStepSize = function setStepSize(max, min, step) {\n    var numberOfSteps = (max - min) / step;\n    var stepSize = sliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  };\n\n  var onGestureEvent = function onGestureEvent(event) {\n    var totalOffset = event.nativeEvent.translationX + valueOffset;\n\n    if (totalOffset >= -knobSize / 2 && totalOffset <= sliderWidth - knobSize / 2) {\n      translateX.setValue(totalOffset);\n\n      if (valueTextRef != null) {\n        var _valueTextRef$current3;\n\n        (_valueTextRef$current3 = valueTextRef.current) == null ? void 0 : _valueTextRef$current3.setNativeProps({\n          text: (Math.round((totalOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min).toString()\n        });\n      }\n\n      inRangeScaleX.setValue((totalOffset + knobSize / 2) / sliderWidth + 0.01);\n    }\n  };\n\n  var onHandlerStateChange = function onHandlerStateChange(event) {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(valueLabelScale, 1);\n    }\n\n    if (event.nativeEvent.state === State.END) {\n      var newOffset = event.nativeEvent.translationX + valueOffset;\n      newOffset = Math.round((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= sliderWidth - knobSize / 2) {\n        newOffset = sliderWidth - knobSize / 2;\n      }\n\n      setValueStatic(newOffset, knobSize, stepInPixels);\n      scaleTo(valueLabelScale, 0.01);\n    }\n  };\n\n  var scaleTo = function scaleTo(param, toValue) {\n    return Animated.timing(param, {\n      toValue: toValue,\n      duration: 150,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var onLayout = function onLayout(event) {\n    setSliderWidth(event.nativeEvent.layout.width);\n  };\n\n  return React.createElement(Animated.View, {\n    style: [styles.container, {\n      opacity: opacity,\n      padding: styleSize === 'large' ? 7 : styleSize === 'medium' ? 14 : 21\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, showValueLabels && React.createElement(View, {\n    style: {\n      width: '100%',\n      height: 1,\n      flexDirection: flexDirection\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      transform: [{\n        translateX: translateX\n      }, {\n        scale: valueLabelScale\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }\n  }, React.createElement(Svg, {\n    width: 40,\n    height: 56,\n    style: _objectSpread(_objectSpread({}, svgOffset), {}, {\n      justifyContent: 'center',\n      alignItems: 'center'\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 25\n    }\n  }, React.createElement(Path, {\n    d: \"M20.368027196163986,55.24077513402203 C20.368027196163986,55.00364778429386 37.12897994729114,42.11537830086061 39.19501224411266,22.754628132990383 C41.26104454093417,3.393877965120147 24.647119286738516,0.571820003300814 20.368027196163986,0.7019902620266703 C16.088935105589453,0.8321519518460209 -0.40167016290734386,3.5393865664909434 0.7742997013327574,21.806127302984205 C1.950269565572857,40.07286803947746 20.368027196163986,55.4779024837502 20.368027196163986,55.24077513402203 z\",\n    strokeWidth: 1,\n    fill: valueLabelsBackgroundColor,\n    stroke: valueLabelsBackgroundColor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 29\n    }\n  })), React.createElement(TextInput, {\n    style: _objectSpread(_objectSpread({\n      position: 'absolute',\n      width: 40,\n      textAlign: 'center'\n    }, svgOffset), {}, {\n      color: valueLabelsTextColor,\n      bottom: 25,\n      fontWeight: 'bold'\n    }),\n    ref: valueTextRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }))), React.createElement(View, {\n    style: {\n      width: '100%',\n      height: knobSize,\n      marginVertical: 4,\n      position: 'relative',\n      flexDirection: flexDirection,\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: [styles.bar, {\n      backgroundColor: inRangeBarColor,\n      left: knobSize / 4,\n      marginLeft: -knobSize / 4,\n      right: knobSize / 4,\n      height: knobSize / 3\n    }],\n    onLayout: onLayout,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      width: sliderWidth,\n      height: knobSize / 3,\n      backgroundColor: outOfRangeBarColor,\n      transform: [{\n        translateX: -sliderWidth / 2\n      }, {\n        scaleX: inRangeScaleX\n      }, {\n        translateX: sliderWidth / 2\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      left: -knobSize / 4,\n      width: knobSize / 2.5,\n      height: knobSize / 3,\n      borderRadius: knobSize / 3,\n      backgroundColor: outOfRangeBarColor\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }), React.createElement(PanGestureHandler, {\n    onGestureEvent: onGestureEvent,\n    onHandlerStateChange: onHandlerStateChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, React.createElement(Animated.View, {\n    style: [styles.knob, {\n      height: knobSize,\n      width: knobSize,\n      borderRadius: knobSize,\n      backgroundColor: knobColor,\n      transform: [{\n        translateX: translateX\n      }]\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 21\n    }\n  }))), showRangeLabels && React.createElement(View, {\n    style: {\n      width: '100%',\n      flexDirection: flexDirection,\n      justifyContent: 'space-between'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: rangeLabelsTextColor,\n      fontWeight: \"bold\",\n      fontSize: fontSize,\n      marginLeft: -7\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  }, min), React.createElement(Text, {\n    style: {\n      color: rangeLabelsTextColor,\n      fontWeight: \"bold\",\n      fontSize: fontSize\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }, max)));\n};\nvar styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  },\n  bar: {\n    position: 'absolute',\n    borderBottomRightRadius: 100,\n    borderTopRightRadius: 100\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/App-Shopping/node_modules/react-native-range-slider-expo/src/Slider.tsx"],"names":["React","useState","useEffect","PanGestureHandler","State","Svg","Path","osRtl","I18nManager","isRTL","SMALL_SIZE","MEDIUM_SIZE","LARGE_SIZE","Slider","min","max","valueOnChange","step","styleSize","knobColor","inRangeBarColor","outOfRangeBarColor","valueLabelsTextColor","valueLabelsBackgroundColor","rangeLabelsTextColor","showRangeLabels","showValueLabels","initialValue","stepInPixels","setStepInPixels","knobSize","setknobSize","fontSize","flexDirection","setFlexDirection","left","svgOffset","setSvgOffset","valueOffset","setValueOffset","sliderWidth","setSliderWidth","Animated","Value","translateX","valueLabelScale","inRangeScaleX","valueTextRef","createRef","opacity","useRef","current","right","stepSize","setStepSize","setNativeProps","text","toString","offset","setValueStatic","setValueText","timing","toValue","duration","useNativeDriver","start","size","setValue","newOffset","Math","round","settingValue","totalOffset","numericValue","floor","numberOfSteps","onGestureEvent","event","nativeEvent","translationX","onHandlerStateChange","state","BEGAN","scaleTo","END","param","onLayout","layout","width","styles","container","padding","height","position","bottom","transform","scale","justifyContent","alignItems","textAlign","color","fontWeight","marginVertical","bar","backgroundColor","marginLeft","scaleX","borderRadius","knob","StyleSheet","create","elevation","borderBottomRightRadius","borderTopRightRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Animated, StyleSheet, View, LayoutChangeEvent, Text, TextInput, I18nManager } from 'react-native';\nimport { PanGestureHandler, PanGestureHandlerGestureEvent, State } from 'react-native-gesture-handler';\nimport Svg, { Path } from 'react-native-svg';\n\nconst osRtl = I18nManager.isRTL;\n\nconst SMALL_SIZE = 24;\nconst MEDIUM_SIZE = 34;\nconst LARGE_SIZE = 44;\n\ninterface SliderProps {\n    min: number,\n    max: number,\n    valueOnChange: (value: number) => void,\n    step?: number,\n    styleSize?: 'small' | 'medium' | 'large' | number,\n    knobColor?: string,\n    inRangeBarColor?: string,\n    outOfRangeBarColor?: string,\n    valueLabelsTextColor?: string,\n    valueLabelsBackgroundColor?: string,\n    rangeLabelsTextColor?: string,\n    showRangeLabels?: boolean,\n    showValueLabels?: boolean,\n    initialValue?: number\n}\n\nexport const Slider = ({\n    min, max, valueOnChange,\n    step = 1,\n    styleSize = 'medium',\n    knobColor = '#00a2ff',\n    inRangeBarColor = 'rgb(200,200,200)',\n    outOfRangeBarColor = 'rgb(100,100,100)',\n    valueLabelsTextColor = 'white',\n    valueLabelsBackgroundColor = '#3a4766',\n    rangeLabelsTextColor = 'rgb(60,60,60)',\n    showRangeLabels = true,\n    showValueLabels = true,\n    initialValue\n}: SliderProps) => {\n\n    // settings\n    const [stepInPixels, setStepInPixels] = useState(0);\n    const [knobSize, setknobSize] = useState(0);\n    const [fontSize] = useState(15);\n\n    // rtl settings\n    const [flexDirection, setFlexDirection] = useState<\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\" | undefined>('row');\n    const [svgOffset, setSvgOffset] = useState<object>({ left: (knobSize - 40) / 2 });\n\n    const [valueOffset, setValueOffset] = useState(0);\n    const [sliderWidth, setSliderWidth] = useState(0);\n\n    // animation values\n    const [translateX] = useState(new Animated.Value(0));\n    const [valueLabelScale] = useState(new Animated.Value(0.01));\n    const [inRangeScaleX] = useState(new Animated.Value(0.01));\n\n    // refs\n    const valueTextRef = React.createRef<TextInput>();\n    const opacity = React.useRef<Animated.Value>(new Animated.Value(0)).current;\n\n    // initalizing settings\n    useEffect(() => {\n        setFlexDirection(osRtl ? 'row-reverse' : 'row');\n        setSvgOffset(osRtl ? { right: (knobSize - 40) / 2 } : { left: (knobSize - 40) / 2 });\n    }, [knobSize]);\n    useEffect(() => {\n        if (sliderWidth > 0) {\n            const stepSize = setStepSize(max, min, step);\n            valueTextRef.current?.setNativeProps({ text: min.toString() });\n            if (typeof initialValue === 'number' && initialValue >= min && initialValue <= max) {\n                const offset = ((initialValue - min) / step) * stepSize - (knobSize / 2);\n                setValueStatic(offset, knobSize, stepSize);\n                setValueText(offset);\n            }\n            Animated.timing(opacity, {\n                toValue: 1,\n                duration: 64,\n                useNativeDriver: true\n            }).start();\n        }\n    }, [min, max, step, initialValue, sliderWidth]);\n    useEffect(() => {\n        const size = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n        setknobSize(size);\n        translateX.setValue(-size / 4);\n    }, [styleSize]);\n\n    const setValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\n        newOffset = Math.round((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n        settingValue(newOffset);\n        setValueOffset(newOffset);\n        valueOnChange(Math.round(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min);\n    }\n    const settingValue = (newOffset: number) => {\n        translateX.setValue(newOffset);\n        inRangeScaleX.setValue((newOffset + (knobSize / 2)) / sliderWidth + 0.01);\n    }\n    const setValueText = (totalOffset: number) => {\n        const numericValue: number = Math.floor(((totalOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n        valueTextRef.current?.setNativeProps({ text: numericValue.toString() });\n    }\n    const setStepSize = (max: number, min: number, step: number) => {\n        const numberOfSteps = ((max - min) / step);\n        const stepSize = sliderWidth / numberOfSteps;\n        setStepInPixels(stepSize);\n        return stepSize;\n    }\n\n    // value gesture events ------------------------------------------------------------------------\n    const onGestureEvent = (event: PanGestureHandlerGestureEvent) => {\n        let totalOffset = event.nativeEvent.translationX + valueOffset;\n        if (totalOffset >= - knobSize / 2 && totalOffset <= sliderWidth - knobSize / 2) {\n            translateX.setValue(totalOffset);\n            if (valueTextRef != null) {\n                valueTextRef.current?.setNativeProps({ text: (Math.round(((totalOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min).toString() });\n            }\n            inRangeScaleX.setValue((totalOffset + (knobSize / 2)) / sliderWidth + 0.01);\n        }\n    }\n    const onHandlerStateChange = (event: PanGestureHandlerGestureEvent) => {\n        if (event.nativeEvent.state === State.BEGAN) {\n            scaleTo(valueLabelScale, 1);\n        }\n        if (event.nativeEvent.state === State.END) {\n            let newOffset = event.nativeEvent.translationX + valueOffset;\n            newOffset = Math.round((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n            if (newOffset < -knobSize / 2) {\n                newOffset = -knobSize / 2;\n            } else if (newOffset >= sliderWidth - knobSize / 2) {\n                newOffset = sliderWidth - knobSize / 2;\n            }\n            setValueStatic(newOffset, knobSize, stepInPixels);\n            scaleTo(valueLabelScale, 0.01);\n        }\n    }\n    // ------------------------------------------------------------------------------------------------\n\n    // gesture events help functions ------------------------------------------------------------------\n    const scaleTo = (param: Animated.Value, toValue: number) => Animated.timing(param,\n        {\n            toValue,\n            duration: 150,\n            useNativeDriver: true\n        }\n    ).start();\n    // ------------------------------------------------------------------------------------------------\n\n    // setting bar width ------------------------------------------------------------------------------\n    const onLayout = (event: LayoutChangeEvent) => {\n        setSliderWidth(event.nativeEvent.layout.width);\n    }\n    // ------------------------------------------------------------------------------------------------\n\n    return (\n        <Animated.View style={[styles.container, { opacity, padding: styleSize === 'large' ? 7 : styleSize === 'medium' ? 14 : 21 }]}>\n            {\n                showValueLabels &&\n                <View style={{ width: '100%', height: 1, flexDirection }}>\n                    <Animated.View\n                        style={{ position: 'absolute', bottom: 0, left: 0, transform: [{ translateX }, { scale: valueLabelScale }] }}\n                    >\n                        <Svg width={40} height={56} style={{ ...svgOffset, justifyContent: 'center', alignItems: 'center' }} >\n                            <Path\n                                d=\"M20.368027196163986,55.24077513402203 C20.368027196163986,55.00364778429386 37.12897994729114,42.11537830086061 39.19501224411266,22.754628132990383 C41.26104454093417,3.393877965120147 24.647119286738516,0.571820003300814 20.368027196163986,0.7019902620266703 C16.088935105589453,0.8321519518460209 -0.40167016290734386,3.5393865664909434 0.7742997013327574,21.806127302984205 C1.950269565572857,40.07286803947746 20.368027196163986,55.4779024837502 20.368027196163986,55.24077513402203 z\"\n                                strokeWidth={1}\n                                fill={valueLabelsBackgroundColor}\n                                stroke={valueLabelsBackgroundColor}\n                            />\n                        </Svg>\n                        <TextInput style={{ position: 'absolute', width: 40, textAlign: 'center', ...svgOffset, color: valueLabelsTextColor, bottom: 25, fontWeight: 'bold' }} ref={valueTextRef} />\n                    </Animated.View>\n                </View>\n            }\n            <View style={{ width: '100%', height: knobSize, marginVertical: 4, position: 'relative', flexDirection, alignItems: 'center' }}>\n                <View style={[styles.bar, { backgroundColor: inRangeBarColor, left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: knobSize / 3 }]} onLayout={onLayout} />\n                <Animated.View style={{ width: sliderWidth, height: knobSize / 3, backgroundColor: outOfRangeBarColor, transform: [{ translateX: -sliderWidth / 2 }, { scaleX: inRangeScaleX }, { translateX: sliderWidth / 2 }] }} />\n                <Animated.View style={{ position: 'absolute', left: -knobSize / 4, width: knobSize / 2.5, height: knobSize / 3, borderRadius: knobSize / 3, backgroundColor: outOfRangeBarColor }} />\n                <PanGestureHandler {...{ onGestureEvent, onHandlerStateChange }}>\n                    <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: knobColor, transform: [{ translateX }] }]} />\n                </PanGestureHandler>\n            </View>\n            {\n                showRangeLabels &&\n                <View style={{ width: '100%', flexDirection, justifyContent: 'space-between' }}>\n                    <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize, marginLeft: -7 }}>{min}</Text>\n                    <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize }}>{max}</Text>\n                </View>\n            }\n        </Animated.View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        height: 100,\n        width: '100%'\n    },\n    knob: {\n        position: 'absolute',\n        elevation: 4\n    },\n    bar: {\n        position: 'absolute',\n        borderBottomRightRadius: 100,\n        borderTopRightRadius: 100\n    }\n});\n"]},"metadata":{},"sourceType":"module"}