{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from \"../sagas/rootSaga\";\nimport categorySlice from \"./slices/categorySlice\";\nimport detailSlice from \"./slices/detailSlice\";\nimport favoriteSlice from \"./slices/favoriteSlice\";\nimport filterSlice from \"./slices/filterSlice\";\nimport homeSlice from \"./slices/homeSlice\";\nimport listSlice from \"./slices/listSlice\";\nimport searchSlice from \"./slices/searchSlice\";\nimport userSlice from \"./slices/userSlice\";\nimport { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport cartSlice from \"./slices/cartSlice\";\nimport orderSlice from \"./slices/orderSlice\";\nvar sagaMiddleware = createSagaMiddleware();\nvar reducers = combineReducers({\n  Cart: cartSlice,\n  Detail: detailSlice,\n  Favorite: favoriteSlice,\n  Filter: filterSlice,\n  Home: homeSlice,\n  List: listSlice,\n  Search: searchSlice,\n  User: userSlice,\n  Category: categorySlice\n});\nvar persistConfig = {\n  key: 'root',\n  storage: AsyncStorage\n};\nvar persistedReducer = persistReducer(persistConfig, reducers);\nvar store = configureStore({\n  reducer: {\n    Cart: cartSlice,\n    Detail: detailSlice,\n    Favorite: favoriteSlice,\n    Filter: filterSlice,\n    Home: homeSlice,\n    List: listSlice,\n    Search: searchSlice,\n    User: userSlice,\n    Category: categorySlice,\n    Order: orderSlice\n  },\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: function middleware(getDefaultMiddleware) {\n    return getDefaultMiddleware({\n      serializableCheck: false\n    }).concat(sagaMiddleware);\n  }\n});\nsagaMiddleware.run(rootSaga);\nexport default store;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/App-Shopping/store/index.js"],"names":["configureStore","createSagaMiddleware","rootSaga","categorySlice","detailSlice","favoriteSlice","filterSlice","homeSlice","listSlice","searchSlice","userSlice","combineReducers","persistReducer","AsyncStorage","cartSlice","orderSlice","sagaMiddleware","reducers","Cart","Detail","Favorite","Filter","Home","List","Search","User","Category","persistConfig","key","storage","persistedReducer","store","reducer","Order","devTools","process","env","NODE_ENV","middleware","getDefaultMiddleware","serializableCheck","concat","run"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP;AACA,OAAOC,aAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,WAAP;AACA,OAAOC,SAAP;AACA,OAAOC,SAAP;AACA,OAAOC,WAAP;AACA,OAAOC,SAAP;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,SAAP;AACA,OAAOC,UAAP;AACA,IAAMC,cAAc,GAAGf,oBAAoB,EAA3C;AAEA,IAAMgB,QAAQ,GAAGN,eAAe,CAAC;AACzBO,EAAAA,IAAI,EAAUJ,SADW;AAEzBK,EAAAA,MAAM,EAAQf,WAFW;AAGzBgB,EAAAA,QAAQ,EAAMf,aAHW;AAIzBgB,EAAAA,MAAM,EAAQf,WAJW;AAKzBgB,EAAAA,IAAI,EAAUf,SALW;AAMzBgB,EAAAA,IAAI,EAAUf,SANW;AAOzBgB,EAAAA,MAAM,EAAQf,WAPW;AAQzBgB,EAAAA,IAAI,EAAUf,SARW;AASzBgB,EAAAA,QAAQ,EAAMvB;AATW,CAAD,CAAhC;AAYA,IAAMwB,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBC,EAAAA,OAAO,EAAEhB;AAFS,CAAtB;AAKA,IAAMiB,gBAAgB,GAAGlB,cAAc,CAACe,aAAD,EAAgBV,QAAhB,CAAvC;AAGA,IAAMc,KAAK,GAAG/B,cAAc,CAAC;AACzBgC,EAAAA,OAAO,EAAE;AACLd,IAAAA,IAAI,EAAUJ,SADT;AAELK,IAAAA,MAAM,EAAQf,WAFT;AAGLgB,IAAAA,QAAQ,EAAMf,aAHT;AAILgB,IAAAA,MAAM,EAAQf,WAJT;AAKLgB,IAAAA,IAAI,EAAUf,SALT;AAMLgB,IAAAA,IAAI,EAAUf,SANT;AAOLgB,IAAAA,MAAM,EAAQf,WAPT;AAQLgB,IAAAA,IAAI,EAAUf,SART;AASLgB,IAAAA,QAAQ,EAAMvB,aATT;AAUL8B,IAAAA,KAAK,EAASlB;AAVT,GADgB;AAazBmB,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAbV;AAczBC,EAAAA,UAAU,EAAE,oBAACC,oBAAD;AAAA,WAA0BA,oBAAoB,CAAC;AAACC,MAAAA,iBAAiB,EAAE;AAApB,KAAD,CAApB,CAAiDC,MAAjD,CAAwDzB,cAAxD,CAA1B;AAAA;AAda,CAAD,CAA5B;AAiBAA,cAAc,CAAC0B,GAAf,CAAmBxC,QAAnB;AAEA,eAAe6B,KAAf","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas/rootSaga';\nimport categorySlice from './slices/categorySlice';\nimport detailSlice from './slices/detailSlice';\nimport favoriteSlice from './slices/favoriteSlice';\nimport filterSlice from './slices/filterSlice';\nimport homeSlice from './slices/homeSlice';\nimport listSlice from './slices/listSlice';\nimport searchSlice from './slices/searchSlice';\nimport userSlice from './slices/userSlice';\nimport { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport cartSlice from './slices/cartSlice';\nimport orderSlice from './slices/orderSlice';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst reducers = combineReducers({\n        Cart        : cartSlice,\n        Detail      : detailSlice,\n        Favorite    : favoriteSlice,\n        Filter      : filterSlice,\n        Home        : homeSlice,\n        List        : listSlice,\n        Search      : searchSlice,\n        User        : userSlice,\n        Category    : categorySlice,\n});\n\nconst persistConfig = {\n    key: 'root',\n    storage: AsyncStorage,\n  };\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\n\nconst store = configureStore({\n    reducer: {\n        Cart        : cartSlice,\n        Detail      : detailSlice,\n        Favorite    : favoriteSlice,\n        Filter      : filterSlice,\n        Home        : homeSlice,\n        List        : listSlice,\n        Search      : searchSlice,\n        User        : userSlice,\n        Category    : categorySlice,\n        Order       : orderSlice\n},\n    devTools: process.env.NODE_ENV !== 'production',\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({serializableCheck: false}).concat(sagaMiddleware),\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}