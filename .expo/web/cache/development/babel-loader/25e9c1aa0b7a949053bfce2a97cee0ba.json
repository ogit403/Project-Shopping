{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\App-Shopping\\\\node_modules\\\\react-native-range-slider-expo\\\\src\\\\RangeSlider.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport KnobBubble from \"./components/KnobBubble\";\nimport { countDecimals, osRtl } from \"./components/utils\";\nvar SMALL_SIZE = 24;\nvar MEDIUM_SIZE = 34;\nvar LARGE_SIZE = 44;\nvar fontSize = 15;\nexport default (function (_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      fromValueOnChange = _ref.fromValueOnChange,\n      toValueOnChange = _ref.toValueOnChange,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? 1 : _ref$step,\n      _ref$styleSize = _ref.styleSize,\n      styleSize = _ref$styleSize === void 0 ? 'medium' : _ref$styleSize,\n      _ref$fromKnobColor = _ref.fromKnobColor,\n      fromKnobColor = _ref$fromKnobColor === void 0 ? '#00a2ff' : _ref$fromKnobColor,\n      _ref$toKnobColor = _ref.toKnobColor,\n      toKnobColor = _ref$toKnobColor === void 0 ? '#00a2ff' : _ref$toKnobColor,\n      _ref$inRangeBarColor = _ref.inRangeBarColor,\n      inRangeBarColor = _ref$inRangeBarColor === void 0 ? 'rgb(100,100,100)' : _ref$inRangeBarColor,\n      _ref$outOfRangeBarCol = _ref.outOfRangeBarColor,\n      outOfRangeBarColor = _ref$outOfRangeBarCol === void 0 ? 'rgb(200,200,200)' : _ref$outOfRangeBarCol,\n      _ref$valueLabelsTextC = _ref.valueLabelsTextColor,\n      valueLabelsTextColor = _ref$valueLabelsTextC === void 0 ? 'white' : _ref$valueLabelsTextC,\n      _ref$valueLabelsBackg = _ref.valueLabelsBackgroundColor,\n      valueLabelsBackgroundColor = _ref$valueLabelsBackg === void 0 ? '#3a4766' : _ref$valueLabelsBackg,\n      _ref$rangeLabelsTextC = _ref.rangeLabelsTextColor,\n      rangeLabelsTextColor = _ref$rangeLabelsTextC === void 0 ? 'rgb(60,60,60)' : _ref$rangeLabelsTextC,\n      _ref$showRangeLabels = _ref.showRangeLabels,\n      showRangeLabels = _ref$showRangeLabels === void 0 ? true : _ref$showRangeLabels,\n      _ref$showValueLabels = _ref.showValueLabels,\n      showValueLabels = _ref$showValueLabels === void 0 ? true : _ref$showValueLabels,\n      initialFromValue = _ref.initialFromValue,\n      initialToValue = _ref.initialToValue,\n      _knobSize = _ref.knobSize;\n  var decimals = countDecimals(step);\n\n  var toDecimal = function toDecimal(num) {\n    var m = Math.pow(10, decimals);\n    return Math.round(num * m) / m;\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      wasInitialized = _useState2[0],\n      setWasInitialized = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      knobSize = _useState4[0],\n      setknobSize = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      barHeight = _useState6[0],\n      setBarHeight = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      stepInPixels = _useState8[0],\n      setStepInPixels = _useState8[1];\n\n  var _useState9 = useState('row'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      flexDirection = _useState10[0],\n      setFlexDirection = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      fromValueOffset = _useState12[0],\n      setFromValueOffset = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      toValueOffset = _useState14[0],\n      setToValueOffset = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      sliderWidth = _useState16[0],\n      setSliderWidth = _useState16[1];\n\n  var _useState17 = useState(3),\n      _useState18 = _slicedToArray(_useState17, 2),\n      fromElevation = _useState18[0],\n      setFromElevation = _useState18[1];\n\n  var _useState19 = useState(3),\n      _useState20 = _slicedToArray(_useState19, 2),\n      toElevation = _useState20[0],\n      setToElevation = _useState20[1];\n\n  var _useState21 = useState(new Animated.Value(0)),\n      _useState22 = _slicedToArray(_useState21, 1),\n      translateXfromValue = _useState22[0];\n\n  var _useState23 = useState(new Animated.Value(0)),\n      _useState24 = _slicedToArray(_useState23, 1),\n      translateXtoValue = _useState24[0];\n\n  var _useState25 = useState(new Animated.Value(0.01)),\n      _useState26 = _slicedToArray(_useState25, 1),\n      fromValueScale = _useState26[0];\n\n  var _useState27 = useState(new Animated.Value(0.01)),\n      _useState28 = _slicedToArray(_useState27, 1),\n      toValueScale = _useState28[0];\n\n  var _useState29 = useState(new Animated.Value(0.01)),\n      _useState30 = _slicedToArray(_useState29, 1),\n      rightBarScaleX = _useState30[0];\n\n  var _useState31 = useState(new Animated.Value(0.01)),\n      _useState32 = _slicedToArray(_useState31, 1),\n      leftBarScaleX = _useState32[0];\n\n  var toValueTextRef = React.createRef();\n  var fromValueTextRef = React.createRef();\n  var opacity = React.useRef(new Animated.Value(0)).current;\n  useEffect(function () {\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n  }, [knobSize]);\n  useEffect(function () {\n    if (wasInitialized) {\n      var _fromValueTextRef$cur, _toValueTextRef$curre;\n\n      var stepSize = setStepSize(max, min, step);\n      (_fromValueTextRef$cur = fromValueTextRef.current) == null ? void 0 : _fromValueTextRef$cur.setNativeProps({\n        text: decimals > 0 ? min.toFixed(decimals) : min.toString()\n      });\n      (_toValueTextRef$curre = toValueTextRef.current) == null ? void 0 : _toValueTextRef$curre.setNativeProps({\n        text: decimals > 0 ? max.toFixed(decimals) : max.toString()\n      });\n\n      if (typeof initialFromValue === 'number' && initialFromValue >= min && initialFromValue <= max) {\n        var offset = (initialFromValue - min) / step * stepSize - knobSize / 2;\n        setFromValueStatic(offset, knobSize, stepSize);\n        setValueText(offset + knobSize, true);\n      }\n\n      if (typeof initialToValue === 'number' && initialToValue >= min && initialToValue <= max && typeof initialFromValue === 'number' && initialToValue > initialFromValue) {\n        var _offset = (initialToValue - min) / step * stepSize - knobSize / 2;\n\n        setToValueStatic(_offset, knobSize, stepSize);\n        setValueText(_offset, false);\n      }\n\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialFromValue, initialToValue, wasInitialized]);\n  useEffect(function () {\n    var sizeBasedOnStyleSize = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    var size = _knobSize != null ? _knobSize : sizeBasedOnStyleSize;\n    setknobSize(size);\n    setBarHeight(sizeBasedOnStyleSize / 3);\n    translateXfromValue.setValue(-size / 4);\n  }, [styleSize]);\n\n  var setFromValueStatic = function setFromValueStatic(newOffset, knobSize, stepInPixels) {\n    newOffset = Math.floor((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    setFromValue(newOffset);\n    setFromValueOffset(newOffset);\n    var changeTo = Math.floor((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n    fromValueOnChange(toDecimal(changeTo));\n  };\n\n  var setFromValue = function setFromValue(newOffset) {\n    translateXfromValue.setValue(newOffset);\n    leftBarScaleX.setValue((newOffset + knobSize / 2) / sliderWidth + 0.01);\n  };\n\n  var setToValueStatic = function setToValueStatic(newOffset, knobSize, stepInPixels) {\n    newOffset = Math.ceil((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    setToValue(newOffset);\n    setToValueOffset(newOffset);\n    var changeTo = Math.ceil((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n    toValueOnChange(toDecimal(changeTo));\n  };\n\n  var setToValue = function setToValue(newOffset) {\n    translateXtoValue.setValue(newOffset);\n    rightBarScaleX.setValue(1.01 - (newOffset + knobSize / 2) / sliderWidth);\n  };\n\n  var setStepSize = function setStepSize(max, min, step) {\n    var numberOfSteps = (max - min) / step;\n    var stepSize = sliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  };\n\n  var setValueText = function setValueText(totalOffset) {\n    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var isFrom = from && fromValueTextRef != null;\n    var isTo = !from && toValueTextRef != null;\n\n    if (isFrom || isTo) {\n      var _current;\n\n      var numericValue = Math[isFrom ? 'floor' : 'ceil']((totalOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n      var text = decimals > 0 ? numericValue.toFixed(decimals) : numericValue.toString();\n      (_current = (isFrom ? fromValueTextRef : toValueTextRef).current) == null ? void 0 : _current.setNativeProps({\n        text: text\n      });\n    }\n  };\n\n  var onGestureEventFromValue = function onGestureEventFromValue(event) {\n    var totalOffset = event.nativeEvent.translationX + fromValueOffset;\n\n    if (totalOffset >= -knobSize / 2 && totalOffset < toValueOffset) {\n      translateXfromValue.setValue(totalOffset);\n      setValueText(totalOffset, true);\n      leftBarScaleX.setValue((totalOffset + knobSize / 2) / sliderWidth + 0.01);\n    }\n  };\n\n  var onHandlerStateChangeFromValue = function onHandlerStateChangeFromValue(event) {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(fromValueScale, 1);\n      setElevations(6, 5);\n    }\n\n    if (event.nativeEvent.state === State.END) {\n      var newOffset = event.nativeEvent.translationX + fromValueOffset;\n      newOffset = Math.floor((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= toValueOffset) {\n        newOffset = toValueOffset - stepInPixels;\n      }\n\n      setFromValueStatic(newOffset, knobSize, stepInPixels);\n      scaleTo(fromValueScale, 0.01);\n    }\n  };\n\n  var onGestureEventToValue = function onGestureEventToValue(event) {\n    var totalOffset = event.nativeEvent.translationX + toValueOffset;\n\n    if (totalOffset <= sliderWidth - knobSize / 2 && totalOffset > fromValueOffset) {\n      translateXtoValue.setValue(totalOffset);\n      setValueText(totalOffset, false);\n      rightBarScaleX.setValue(1.01 - (totalOffset + knobSize / 2) / sliderWidth);\n    }\n  };\n\n  var onHandlerStateChangeToValue = function onHandlerStateChangeToValue(event) {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(toValueScale, 1);\n      setElevations(5, 6);\n    }\n\n    if (event.nativeEvent.state === State.END) {\n      var newOffset = event.nativeEvent.translationX + toValueOffset;\n      newOffset = Math.ceil((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n\n      if (newOffset > sliderWidth - knobSize / 2) {\n        newOffset = sliderWidth - knobSize / 2;\n      } else if (newOffset <= fromValueOffset) {\n        newOffset = fromValueOffset + stepInPixels;\n      }\n\n      setToValueOffset(newOffset);\n      translateXtoValue.setValue(newOffset);\n      rightBarScaleX.setValue(1.01 - (newOffset + knobSize / 2) / sliderWidth);\n      scaleTo(toValueScale, 0.01);\n      var changeTo = Math.ceil((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n      toValueOnChange(toDecimal(changeTo));\n    }\n  };\n\n  var scaleTo = function scaleTo(param, toValue) {\n    return Animated.timing(param, {\n      toValue: toValue,\n      duration: 150,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var setElevations = function setElevations(fromValue, toValue) {\n    setFromElevation(fromValue);\n    setToElevation(toValue);\n  };\n\n  var onLayout = function onLayout(event) {\n    if (wasInitialized === false) {\n      var width = event.nativeEvent.layout.width;\n      setSliderWidth(width);\n      translateXtoValue.setValue(width - knobSize / 2);\n      setToValueOffset(width - knobSize / 2);\n      setWasInitialized(true);\n    }\n  };\n\n  return React.createElement(Animated.View, {\n    style: [styles.container, {\n      opacity: opacity,\n      padding: styleSize === 'large' ? 7 : styleSize === 'medium' ? 14 : 21\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 5\n    }\n  }, showValueLabels && React.createElement(View, {\n    style: {\n      width: '100%',\n      height: 1,\n      flexDirection: flexDirection\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, React.createElement(KnobBubble, {\n    knobSize: knobSize,\n    valueLabelsBackgroundColor: valueLabelsBackgroundColor,\n    valueLabelsTextColor: valueLabelsTextColor,\n    translateX: translateXfromValue,\n    scale: fromValueScale,\n    textInputRef: fromValueTextRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }\n  }), React.createElement(KnobBubble, {\n    knobSize: knobSize,\n    valueLabelsBackgroundColor: valueLabelsBackgroundColor,\n    valueLabelsTextColor: valueLabelsTextColor,\n    translateX: translateXtoValue,\n    scale: toValueScale,\n    textInputRef: toValueTextRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: {\n      width: '100%',\n      height: knobSize,\n      marginVertical: 4,\n      position: 'relative',\n      flexDirection: flexDirection,\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      position: 'absolute',\n      backgroundColor: inRangeBarColor,\n      left: knobSize / 4,\n      marginLeft: -knobSize / 4,\n      right: knobSize / 4,\n      height: barHeight\n    },\n    onLayout: onLayout,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      left: knobSize / 4,\n      marginLeft: -knobSize / 4,\n      right: knobSize / 4,\n      height: barHeight,\n      backgroundColor: outOfRangeBarColor,\n      transform: [{\n        translateX: sliderWidth / 2\n      }, {\n        scaleX: rightBarScaleX\n      }, {\n        translateX: -sliderWidth / 2\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      left: -knobSize / 4,\n      width: knobSize / 2,\n      height: barHeight,\n      borderRadius: barHeight,\n      backgroundColor: outOfRangeBarColor\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      width: sliderWidth,\n      height: barHeight,\n      backgroundColor: outOfRangeBarColor,\n      transform: [{\n        translateX: -sliderWidth / 2\n      }, {\n        scaleX: leftBarScaleX\n      }, {\n        translateX: sliderWidth / 2\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      left: sliderWidth - knobSize / 4,\n      width: knobSize / 2,\n      height: barHeight,\n      borderRadius: barHeight,\n      backgroundColor: outOfRangeBarColor\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }\n  }), React.createElement(PanGestureHandler, {\n    onGestureEvent: onGestureEventFromValue,\n    onHandlerStateChange: onHandlerStateChangeFromValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, React.createElement(Animated.View, {\n    style: [styles.knob, {\n      height: knobSize,\n      width: knobSize,\n      borderRadius: knobSize,\n      backgroundColor: fromKnobColor,\n      elevation: fromElevation,\n      transform: [{\n        translateX: translateXfromValue\n      }]\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  })), React.createElement(PanGestureHandler, {\n    onGestureEvent: onGestureEventToValue,\n    onHandlerStateChange: onHandlerStateChangeToValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }\n  }, React.createElement(Animated.View, {\n    style: [styles.knob, {\n      height: knobSize,\n      width: knobSize,\n      borderRadius: knobSize,\n      backgroundColor: toKnobColor,\n      elevation: toElevation,\n      transform: [{\n        translateX: translateXtoValue\n      }]\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }))), showRangeLabels && React.createElement(View, {\n    style: {\n      width: '100%',\n      flexDirection: flexDirection,\n      justifyContent: 'space-between'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: rangeLabelsTextColor,\n      fontWeight: \"bold\",\n      fontSize: fontSize\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }, min), React.createElement(Text, {\n    style: {\n      color: rangeLabelsTextColor,\n      fontWeight: \"bold\",\n      fontSize: fontSize\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 11\n    }\n  }, max)));\n});\nvar styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/App-Shopping/node_modules/react-native-range-slider-expo/src/RangeSlider.tsx"],"names":["React","useState","useEffect","PanGestureHandler","State","KnobBubble","countDecimals","osRtl","SMALL_SIZE","MEDIUM_SIZE","LARGE_SIZE","fontSize","min","max","fromValueOnChange","toValueOnChange","step","styleSize","fromKnobColor","toKnobColor","inRangeBarColor","outOfRangeBarColor","valueLabelsTextColor","valueLabelsBackgroundColor","rangeLabelsTextColor","showRangeLabels","showValueLabels","initialFromValue","initialToValue","_knobSize","knobSize","decimals","toDecimal","num","m","Math","round","wasInitialized","setWasInitialized","setknobSize","barHeight","setBarHeight","stepInPixels","setStepInPixels","flexDirection","setFlexDirection","fromValueOffset","setFromValueOffset","toValueOffset","setToValueOffset","sliderWidth","setSliderWidth","fromElevation","setFromElevation","toElevation","setToElevation","Animated","Value","translateXfromValue","translateXtoValue","fromValueScale","toValueScale","rightBarScaleX","leftBarScaleX","toValueTextRef","createRef","fromValueTextRef","opacity","useRef","current","stepSize","setStepSize","setNativeProps","text","toFixed","toString","offset","setFromValueStatic","setValueText","setToValueStatic","timing","toValue","duration","useNativeDriver","start","sizeBasedOnStyleSize","size","setValue","newOffset","floor","setFromValue","changeTo","ceil","setToValue","numberOfSteps","totalOffset","from","isFrom","isTo","numericValue","onGestureEventFromValue","event","nativeEvent","translationX","onHandlerStateChangeFromValue","state","BEGAN","scaleTo","setElevations","END","onGestureEventToValue","onHandlerStateChangeToValue","param","fromValue","onLayout","width","layout","styles","container","padding","height","marginVertical","position","alignItems","backgroundColor","left","marginLeft","right","transform","translateX","scaleX","borderRadius","knob","elevation","justifyContent","color","fontWeight","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Animated, StyleSheet, View, LayoutChangeEvent, Text, TextInput, I18nManager } from 'react-native';\nimport { PanGestureHandler, PanGestureHandlerGestureEvent, State } from 'react-native-gesture-handler';\nimport KnobBubble from './components/KnobBubble';\nimport { countDecimals, osRtl } from './components/utils';\n\nconst SMALL_SIZE = 24;\nconst MEDIUM_SIZE = 34;\nconst LARGE_SIZE = 44;\nconst fontSize = 15;\n\ninterface SliderProps {\n  min: number,\n  max: number,\n  fromValueOnChange: (value: number) => void,\n  toValueOnChange: (value: number) => void,\n  step?: number,\n  styleSize?: 'small' | 'medium' | 'large' | number,\n  fromKnobColor?: string,\n  toKnobColor?: string,\n  inRangeBarColor?: string,\n  outOfRangeBarColor?: string,\n  valueLabelsTextColor?: string,\n  valueLabelsBackgroundColor?: string,\n  rangeLabelsTextColor?: string,\n  showRangeLabels?: boolean,\n  showValueLabels?: boolean,\n  initialFromValue?: number,\n  initialToValue?: number,\n  knobSize?: number\n}\n\nexport default ({\n  min, max, fromValueOnChange, toValueOnChange,\n  step = 1,\n  styleSize = 'medium',\n  fromKnobColor = '#00a2ff',\n  toKnobColor = '#00a2ff',\n  inRangeBarColor = 'rgb(100,100,100)',\n  outOfRangeBarColor = 'rgb(200,200,200)',\n  valueLabelsTextColor = 'white',\n  valueLabelsBackgroundColor = '#3a4766',\n  rangeLabelsTextColor = 'rgb(60,60,60)',\n  showRangeLabels = true,\n  showValueLabels = true,\n  initialFromValue,\n  initialToValue,\n  knobSize: _knobSize\n}: SliderProps) => {\n\n  const decimals = countDecimals(step);\n  const toDecimal = (num: number) => {\n    const m = 10 ** decimals;\n    return Math.round(num * m) / m;\n  }\n  // settings\n  const [wasInitialized, setWasInitialized] = useState(false);\n  const [knobSize, setknobSize] = useState(0);\n  const [barHeight, setBarHeight] = useState(0);\n  const [stepInPixels, setStepInPixels] = useState(0);\n\n  // rtl settings\n  const [flexDirection, setFlexDirection] = useState<\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\" | undefined>('row');\n\n  const [fromValueOffset, setFromValueOffset] = useState(0);\n  const [toValueOffset, setToValueOffset] = useState(0);\n  const [sliderWidth, setSliderWidth] = useState(0);\n  const [fromElevation, setFromElevation] = useState(3);\n  const [toElevation, setToElevation] = useState(3);\n\n  // animation values\n  const [translateXfromValue] = useState(new Animated.Value(0));\n  const [translateXtoValue] = useState(new Animated.Value(0));\n  const [fromValueScale] = useState(new Animated.Value(0.01));\n  const [toValueScale] = useState(new Animated.Value(0.01));\n  const [rightBarScaleX] = useState(new Animated.Value(0.01));\n  const [leftBarScaleX] = useState(new Animated.Value(0.01));\n\n  // refs\n  const toValueTextRef = React.createRef<TextInput>();\n  const fromValueTextRef = React.createRef<TextInput>();\n  const opacity = React.useRef<Animated.Value>(new Animated.Value(0)).current;\n\n  // initalizing settings\n  useEffect(() => {\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n  }, [knobSize]);\n  useEffect(() => {\n    if (wasInitialized) {\n      const stepSize = setStepSize(max, min, step);\n      fromValueTextRef.current?.setNativeProps({ text: decimals > 0 ? min.toFixed(decimals) : min.toString() });\n      toValueTextRef.current?.setNativeProps({ text: decimals > 0 ? max.toFixed(decimals) : max.toString() });\n      if (typeof initialFromValue === 'number' && initialFromValue >= min && initialFromValue <= max) {\n        const offset = ((initialFromValue - min) / step) * stepSize - (knobSize / 2);\n        setFromValueStatic(offset, knobSize, stepSize);\n        setValueText(offset + knobSize, true);\n      }\n      if (typeof initialToValue === 'number' && initialToValue >= min && initialToValue <= max && typeof initialFromValue === 'number' && initialToValue > initialFromValue) {\n        const offset = ((initialToValue - min) / step) * stepSize - (knobSize / 2);\n        setToValueStatic(offset, knobSize, stepSize);\n        setValueText(offset, false);\n      }\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialFromValue, initialToValue, wasInitialized]);\n  useEffect(() => {\n    const sizeBasedOnStyleSize = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    const size = _knobSize ?? sizeBasedOnStyleSize;\n    setknobSize(size);\n    setBarHeight(sizeBasedOnStyleSize / 3)\n    translateXfromValue.setValue(-size / 4);\n  }, [styleSize]);\n\n  // initalizing settings helpers\n  const setFromValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\n    newOffset = Math.floor((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n    setFromValue(newOffset);\n    setFromValueOffset(newOffset);\n    const changeTo = Math.floor(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n    fromValueOnChange(toDecimal(changeTo));\n  }\n  const setFromValue = (newOffset: number) => {\n    translateXfromValue.setValue(newOffset);\n    leftBarScaleX.setValue((newOffset + (knobSize / 2)) / sliderWidth + 0.01);\n  }\n  const setToValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\n    newOffset = Math.ceil((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n    setToValue(newOffset);\n    setToValueOffset(newOffset);\n    const changeTo = Math.ceil(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n    toValueOnChange(toDecimal(changeTo));\n  }\n  const setToValue = (newOffset: number) => {\n    translateXtoValue.setValue(newOffset);\n    rightBarScaleX.setValue(1.01 - ((newOffset + (knobSize / 2)) / sliderWidth));\n  }\n  const setStepSize = (max: number, min: number, step: number) => {\n    const numberOfSteps = ((max - min) / step);\n    const stepSize = sliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  }\n  const setValueText = (totalOffset: number, from = true) => {\n    const isFrom = from && fromValueTextRef != null;\n    const isTo = !from && toValueTextRef != null;\n    if (isFrom || isTo) {\n      const numericValue: number = Math[isFrom ? 'floor' : 'ceil'](((totalOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n      const text = decimals > 0 ? numericValue.toFixed(decimals) : numericValue.toString();\n      (isFrom ? fromValueTextRef : toValueTextRef).current?.setNativeProps({ text });\n    }\n  }\n\n  // from value gesture events ------------------------------------------------------------------------\n  const onGestureEventFromValue = (event: PanGestureHandlerGestureEvent) => {\n    let totalOffset = event.nativeEvent.translationX + fromValueOffset;\n    if (totalOffset >= -knobSize / 2 && totalOffset < toValueOffset) {\n      translateXfromValue.setValue(totalOffset);\n      setValueText(totalOffset, true);\n      leftBarScaleX.setValue((totalOffset + (knobSize / 2)) / sliderWidth + 0.01);\n    }\n  }\n  const onHandlerStateChangeFromValue = (event: PanGestureHandlerGestureEvent) => {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(fromValueScale, 1);\n      setElevations(6, 5);\n    }\n    if (event.nativeEvent.state === State.END) {\n      let newOffset = event.nativeEvent.translationX + fromValueOffset;\n      newOffset = Math.floor((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= toValueOffset) {\n        newOffset = toValueOffset - stepInPixels;\n      }\n      setFromValueStatic(newOffset, knobSize, stepInPixels)\n      scaleTo(fromValueScale, 0.01);\n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  // to value gesture events ------------------------------------------------------------------------\n  const onGestureEventToValue = (event: PanGestureHandlerGestureEvent) => {\n    const totalOffset = event.nativeEvent.translationX + toValueOffset;\n    if (totalOffset <= sliderWidth - knobSize / 2 && totalOffset > fromValueOffset) {\n      translateXtoValue.setValue(totalOffset);\n      setValueText(totalOffset, false);\n      rightBarScaleX.setValue(1.01 - ((totalOffset + (knobSize / 2)) / sliderWidth));\n    }\n  }\n  const onHandlerStateChangeToValue = (event: PanGestureHandlerGestureEvent) => {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(toValueScale, 1);\n      setElevations(5, 6);\n    }\n    if (event.nativeEvent.state === State.END) {\n      let newOffset = event.nativeEvent.translationX + toValueOffset;\n      newOffset = Math.ceil((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n      if (newOffset > sliderWidth - knobSize / 2) {\n        newOffset = sliderWidth - knobSize / 2;\n      } else if (newOffset <= fromValueOffset) {\n        newOffset = fromValueOffset + stepInPixels;\n      }\n      setToValueOffset(newOffset);\n      translateXtoValue.setValue(newOffset);\n      rightBarScaleX.setValue(1.01 - ((newOffset + (knobSize / 2)) / sliderWidth));\n      scaleTo(toValueScale, 0.01);\n      const changeTo = Math.ceil(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n      toValueOnChange(toDecimal(changeTo));\n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  // gesture events help functions ------------------------------------------------------------------\n  const scaleTo = (param: Animated.Value, toValue: number) => Animated.timing(param, {\n    toValue,\n    duration: 150,\n    useNativeDriver: true\n  }).start();\n\n  const setElevations = (fromValue: number, toValue: number) => {\n    setFromElevation(fromValue);\n    setToElevation(toValue)\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  // setting bar width ------------------------------------------------------------------------------\n  const onLayout = (event: LayoutChangeEvent) => {\n    if (wasInitialized === false) {\n      const { width } = event.nativeEvent.layout;\n      setSliderWidth(width);\n      translateXtoValue.setValue(width - knobSize / 2);\n      setToValueOffset(width - knobSize / 2);\n      setWasInitialized(true);\n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  return (\n    <Animated.View style={[styles.container, { opacity, padding: styleSize === 'large' ? 7 : styleSize === 'medium' ? 14 : 21 }]}>\n      {\n        showValueLabels &&\n        <View style={{ width: '100%', height: 1, flexDirection }}>\n          <KnobBubble {...{ knobSize, valueLabelsBackgroundColor, valueLabelsTextColor }}\n            translateX={translateXfromValue}\n            scale={fromValueScale}\n            textInputRef={fromValueTextRef}\n          />\n          <KnobBubble {...{ knobSize, valueLabelsBackgroundColor, valueLabelsTextColor }}\n            translateX={translateXtoValue}\n            scale={toValueScale}\n            textInputRef={toValueTextRef}\n          />\n        </View>\n      }\n      <View style={{ width: '100%', height: knobSize, marginVertical: 4, position: 'relative', flexDirection, alignItems: 'center' }}>\n        <View style={{ position: 'absolute', backgroundColor: inRangeBarColor, left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: barHeight }} onLayout={onLayout} />\n        <Animated.View style={{ position: 'absolute', left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: barHeight, backgroundColor: outOfRangeBarColor, transform: [{ translateX: sliderWidth / 2 }, { scaleX: rightBarScaleX }, { translateX: -sliderWidth / 2 }] }} />\n        <Animated.View style={{ position: 'absolute', left: -knobSize / 4, width: knobSize / 2, height: barHeight, borderRadius: barHeight, backgroundColor: outOfRangeBarColor }} />\n        <Animated.View style={{ width: sliderWidth, height: barHeight, backgroundColor: outOfRangeBarColor, transform: [{ translateX: -sliderWidth / 2 }, { scaleX: leftBarScaleX }, { translateX: sliderWidth / 2 }] }} />\n        <Animated.View style={{ position: 'absolute', left: sliderWidth - knobSize / 4, width: knobSize / 2, height: barHeight, borderRadius: barHeight, backgroundColor: outOfRangeBarColor }} />\n        <PanGestureHandler onGestureEvent={onGestureEventFromValue} onHandlerStateChange={onHandlerStateChangeFromValue}>\n          <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: fromKnobColor, elevation: fromElevation, transform: [{ translateX: translateXfromValue }] }]} />\n        </PanGestureHandler>\n        <PanGestureHandler onGestureEvent={onGestureEventToValue} onHandlerStateChange={onHandlerStateChangeToValue}>\n          <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: toKnobColor, elevation: toElevation, transform: [{ translateX: translateXtoValue }] }]} />\n        </PanGestureHandler>\n      </View>\n      {\n        showRangeLabels &&\n        <View style={{ width: '100%', flexDirection, justifyContent: 'space-between' }}>\n          <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize }}>{min}</Text>\n          <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize }}>{max}</Text>\n        </View>\n      }\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  }\n});\n"]},"metadata":{},"sourceType":"module"}